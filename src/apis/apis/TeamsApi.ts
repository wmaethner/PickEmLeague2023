/* tslint:disable */
/* eslint-disable */
/**
 * Pick Em League Swagger
 * Welcome to the Swagger UI documentation site!
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Team,
} from '../models';
import {
    TeamFromJSON,
    TeamToJSON,
} from '../models';

export interface GetTeamByAbbrRequest {
    abbr: string;
}

export interface GetTeamByIdRequest {
    id: string;
}

export interface PostTeamListRequest {
    teamFile: Blob;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     */
    async getTeamByAbbrRaw(requestParameters: GetTeamByAbbrRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.abbr === null || requestParameters.abbr === undefined) {
            throw new runtime.RequiredError('abbr','Required parameter requestParameters.abbr was null or undefined when calling getTeamByAbbr.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams/by_abbr/{abbr}`.replace(`{${"abbr"}}`, encodeURIComponent(String(requestParameters.abbr))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async getTeamByAbbr(requestParameters: GetTeamByAbbrRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.getTeamByAbbrRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTeamByIdRaw(requestParameters: GetTeamByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTeamById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams/by_id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async getTeamById(requestParameters: GetTeamByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.getTeamByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of users
     */
    async getTeamListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Team>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamFromJSON));
    }

    /**
     * Retrieve a list of users
     */
    async getTeamList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Team>> {
        const response = await this.getTeamListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postTeamListRaw(requestParameters: PostTeamListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teamFile === null || requestParameters.teamFile === undefined) {
            throw new runtime.RequiredError('teamFile','Required parameter requestParameters.teamFile was null or undefined when calling postTeamList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.teamFile !== undefined) {
            formParams.append('team-file', requestParameters.teamFile as any);
        }

        const response = await this.request({
            path: `/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postTeamList(requestParameters: PostTeamListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postTeamListRaw(requestParameters, initOverrides);
    }

}
