/* tslint:disable */
/* eslint-disable */
/**
 * Pick Em League Swagger
 * Welcome to the Swagger UI documentation site!
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Game,
} from '../models';
import {
    GameFromJSON,
    GameToJSON,
} from '../models';

export interface GetGameByWeekAndTeamRequest {
    abbr: string;
    week: string;
}

export interface GetGamesByWeekRequest {
    week: string;
}

export interface PostGameListRequest {
    gameFile: Blob;
}

/**
 * 
 */
export class GamesApi extends runtime.BaseAPI {

    /**
     */
    async getGameByWeekAndTeamRaw(requestParameters: GetGameByWeekAndTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters.abbr === null || requestParameters.abbr === undefined) {
            throw new runtime.RequiredError('abbr','Required parameter requestParameters.abbr was null or undefined when calling getGameByWeekAndTeam.');
        }

        if (requestParameters.week === null || requestParameters.week === undefined) {
            throw new runtime.RequiredError('week','Required parameter requestParameters.week was null or undefined when calling getGameByWeekAndTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games/{week}/{abbr}`.replace(`{${"abbr"}}`, encodeURIComponent(String(requestParameters.abbr))).replace(`{${"week"}}`, encodeURIComponent(String(requestParameters.week))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     */
    async getGameByWeekAndTeam(requestParameters: GetGameByWeekAndTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Game> {
        const response = await this.getGameByWeekAndTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of games
     */
    async getGameListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Game>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameFromJSON));
    }

    /**
     * Retrieve a list of games
     */
    async getGameList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Game>> {
        const response = await this.getGameListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getGamesByWeekRaw(requestParameters: GetGamesByWeekRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Game>>> {
        if (requestParameters.week === null || requestParameters.week === undefined) {
            throw new runtime.RequiredError('week','Required parameter requestParameters.week was null or undefined when calling getGamesByWeek.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games/{week}`.replace(`{${"week"}}`, encodeURIComponent(String(requestParameters.week))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameFromJSON));
    }

    /**
     */
    async getGamesByWeek(requestParameters: GetGamesByWeekRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Game>> {
        const response = await this.getGamesByWeekRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postGameListRaw(requestParameters: PostGameListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.gameFile === null || requestParameters.gameFile === undefined) {
            throw new runtime.RequiredError('gameFile','Required parameter requestParameters.gameFile was null or undefined when calling postGameList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.gameFile !== undefined) {
            formParams.append('game-file', requestParameters.gameFile as any);
        }

        const response = await this.request({
            path: `/games`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postGameList(requestParameters: PostGameListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postGameListRaw(requestParameters, initOverrides);
    }

}
