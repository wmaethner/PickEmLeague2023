/* tslint:disable */
/* eslint-disable */
/**
 * Pick Em League Swagger
 * Welcome to the Swagger UI documentation site!
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ReadIdsModel,
  ReleaseNotesListModel,
  ReleaseNotesModel,
} from '../models';
import {
    ReadIdsModelFromJSON,
    ReadIdsModelToJSON,
    ReleaseNotesListModelFromJSON,
    ReleaseNotesListModelToJSON,
    ReleaseNotesModelFromJSON,
    ReleaseNotesModelToJSON,
} from '../models';

export interface GetReleaseNotesByIdRequest {
    id: number;
}

export interface PostReleaseNotesListRequest {
    title: string;
    date: string;
}

export interface PostReleaseNotesReadRequest {
    id: number;
}

export interface PutReleaseNotesByIdRequest {
    id: number;
    entry: string;
}

/**
 * 
 */
export class ReleaseNotesApi extends runtime.BaseAPI {

    /**
     */
    async getReleaseNotesByIdRaw(requestParameters: GetReleaseNotesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReleaseNotesModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReleaseNotesById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/release_notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReleaseNotesModelFromJSON(jsonValue));
    }

    /**
     */
    async getReleaseNotesById(requestParameters: GetReleaseNotesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReleaseNotesModel> {
        const response = await this.getReleaseNotesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of games
     */
    async getReleaseNotesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReleaseNotesListModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/release_notes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReleaseNotesListModelFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of games
     */
    async getReleaseNotesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReleaseNotesListModel> {
        const response = await this.getReleaseNotesListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getReleaseNotesReadsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadIdsModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/release_notes/reads`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadIdsModelFromJSON(jsonValue));
    }

    /**
     */
    async getReleaseNotesReads(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadIdsModel> {
        const response = await this.getReleaseNotesReadsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postReleaseNotesListRaw(requestParameters: PostReleaseNotesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling postReleaseNotesList.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling postReleaseNotesList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        const response = await this.request({
            path: `/release_notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postReleaseNotesList(requestParameters: PostReleaseNotesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postReleaseNotesListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postReleaseNotesReadRaw(requestParameters: PostReleaseNotesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postReleaseNotesRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/release_notes/reads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postReleaseNotesRead(requestParameters: PostReleaseNotesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postReleaseNotesReadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putReleaseNotesByIdRaw(requestParameters: PutReleaseNotesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putReleaseNotesById.');
        }

        if (requestParameters.entry === null || requestParameters.entry === undefined) {
            throw new runtime.RequiredError('entry','Required parameter requestParameters.entry was null or undefined when calling putReleaseNotesById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.entry !== undefined) {
            formParams.append('entry', requestParameters.entry as any);
        }

        const response = await this.request({
            path: `/release_notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putReleaseNotesById(requestParameters: PutReleaseNotesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putReleaseNotesByIdRaw(requestParameters, initOverrides);
    }

}
